service: pare
app: pare
org: jobfindingapp778

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  versionFunctions: false
  stage: development
  runtime: nodejs18.x
  timeout: 20
  httpApi:
    cors: true
  websocketsApiName: job-app-websockets-api
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  environment:
    # keeperImageUploadBucket: ${self:custom.keeperImageUploadBucket}
    region: 'us-east-1'
    VITE_RESUME_BUCKET: ${self:custom.resumeBucketName}
    VITE_IMAGE_BUCKET: ${self:custom.imageBucketName}
  iamRoleStatements:
    # Allow sending emails with SES
    - Effect: 'Allow'
      Action:
        - 'ses:SendEmail'
        - 'ses:SendRawEmail'
        - 'ses:SendTemplatedEmail'
      Resource: '*'

    # Allow interaction with SQS queues
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
        - 'sqs:ReceiveMessage'
        - 'sqs:DeleteMessage'
        - 'sqs:GetQueueUrl'
      Resource: 'arn:aws:sqs:us-east-1:*:*'

    # S3 permissions for both image and resume buckets
    - Effect: 'Allow'
      Action:
        - 's3:PutObject'
        - 's3:GetObject'
        - 's3:DeleteObject'
        - 's3:ListBucket'
      Resource:
        - 'arn:aws:s3:::${self:custom.resumeBucketName}'
        - 'arn:aws:s3:::${self:custom.resumeBucketName}/*'
        - 'arn:aws:s3:::${self:custom.imageBucketName}'
        - 'arn:aws:s3:::${self:custom.imageBucketName}/*'

package:
  individually: true
  exclude:
    - node_modules/**
    - .git/**
    - .github/**
    - test/**
    - tests/**
    - docs/**
    - '**/*.test.js'
    - '**/*.spec.js'
    - '**/*.test.ts'
    - '**/*.spec.ts'
  include:
    - functions/**
    - models/**
    - utils/**
    - schemas/**
    - constants.js
    - db.ts
    - keeperApiUtils.ts

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-prune-plugin
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    minify: false # Set to true for production
    sourcemap: true # Helpful for debugging
    target: 'node18'
    platform: 'node'
    concurrency: 10
    packager: 'npm'
    exclude:
      - 'aws-sdk'
    define:
      'process.env.NODE_ENV': '"${opt:stage, self:provider.stage, "development"}"'
    external:
      - 'aws-sdk'
  dotenv:
    path: .env.${opt:stage, self:provider.stage, 'development'}
    includeAll: true
  prune:
    automatic: true
    number: 3
  resumeBucketName: ${opt:stage, 'development'}-keeper-resume-bucket
  imageBucketName: keeper-image-bucket

resources:
  Resources:
    ResumesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.resumeBucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - HEAD
              AllowedOrigins:
                - https://zyrajobs.com
                - http://localhost:3000
              ExposedHeaders:
                - ETag
                - Content-Length
                - Content-Type
              MaxAge: 3600
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerEnforced

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageBucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - HEAD
              AllowedOrigins:
                - https://zyrajobs.com
                - http://localhost:3000
              ExposedHeaders:
                - ETag
                - Content-Length
                - Content-Type
              MaxAge: 3600
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerEnforced

functions:
  handleChatGPTRequest:
    handler: functions/chatGPT/handleChatGPTRequest.handler
    events:
      - http:
          path: handleChatGPTRequest
          method: post
          cors: true

  findCompany:
    handler: functions/companies/findCompany.handler
    events:
      - http:
          path: findCompany
          method: post
          cors: true

  updateCompany:
    handler: functions/companies/updateCompany.handler
    events:
      - http:
          path: updateCompany
          method: post
          cors: true

  uploadResume:
    handler: functions/resumes/uploadResume.handler
    environment:
      VITE_RESUME_BUCKET: ${self:custom.resumeBucketName}
    events:
      - http:
          path: uploadResume
          method: post
          cors: true

  getResume:
    handler: functions/resumes/getResume.handler
    events:
      - http:
          path: getResume
          method: post
          cors: true

  imageUpload:
    handler: functions/misc/imageUpload.handler
    environment:
      VITE_IMAGE_BUCKET: ${self:custom.imageBucketName}
    events:
      - http:
          path: imageUpload
          method: post
          cors: true

  getGoogleMapsLocations:
    handler: functions/misc/getGoogleMapsLocations.handler
    events:
      - http:
          path: getGoogleMapsLocations
          method: post
          cors: true

  sendPubnubNotification:
    handler: functions/misc/sendPubnubNotification.handler
    events:
      - http:
          path: sendPubnubNotification
          method: post
          cors: true

  preSignUp:
    handler: functions/users/preSignUp.handler
    events:
      - http:
          path: preSignUp
          method: post
          cors: true

  addCognitoUserToMongoDb:
    handler: functions/users/addCognitoUserToMongoDb.handler
    events:
      - http:
          path: addCognitoUserToMongoDb
          method: post
          cors: true

  recordSwipe:
    handler: functions/users/recordSwipe.handler
    events:
      - http:
          path: recordSwipe
          method: post
          cors: true

  updateExpoPushToken:
    handler: functions/users/updateExpoPushToken.handler
    events:
      - http:
          path: updateExpoPushToken
          method: post
          cors: true

  addEmployer:
    handler: functions/users/addEmployer.handler
    events:
      - http:
          path: addEmployer
          method: post
          cors: true

  getEmployee:
    handler: functions/users/getEmployee.handler
    events:
      - http:
          path: getEmployee
          method: post
          cors: true

  setEmployeeFieldOnAllDocuments:
    handler: functions/users/setEmployeeFieldOnAllDocuments.handler
    events:
      - http:
          path: setEmployeeFieldOnAllDocuments
          method: post
          cors: true

  getEmployeesForSwiping:
    handler: functions/users/getEmployeesForSwiping.handler
    events:
      - http:
          path: getEmployeesForSwiping
          method: post
          cors: true

  getEmployer:
    handler: functions/users/getEmployer.handler
    events:
      - http:
          path: getEmployer
          method: post
          cors: true

  getEmployerData:
    handler: functions/users/getEmployerData.handler
    events:
      - http:
          path: getEmployerData
          method: post
          cors: true

  getEmployeeData:
    handler: functions/users/getEmployeeData.handler
    timeout: 30
    events:
      - http:
          path: getEmployeeData
          method: post
          cors: true

  addMatch:
    handler: functions/users/addMatch.handler
    events:
      - http:
          path: addMatch
          method: post
          cors: true

  updateMatchForBothOwners:
    handler: functions/users/updateMatchForBothOwners.handler
    events:
      - http:
          path: updateMatchForBothOwners
          method: post
          cors: true

  updateOwnMatch:
    handler: functions/users/updateOwnMatch.handler
    events:
      - http:
          path: updateOwnMatch
          method: post
          cors: true

  deleteMatch:
    handler: functions/users/deleteMatch.handler
    events:
      - http:
          path: deleteMatch
          method: post
          cors: true

  updateUserSettings:
    handler: functions/users/updateUserSettings.handler
    events:
      - http:
          path: updateUserSettings
          method: post
          cors: true

  updateMatchNotification:
    handler: functions/users/updateMatchNotification.handler
    events:
      - http:
          path: updateMatchNotification
          method: post
          cors: true

  updateUserData:
    handler: functions/users/updateUserData.handler
    events:
      - http:
          path: updateUserData
          method: post
          cors: true

  getUsersByArrayOfIds:
    handler: functions/users/getUsersByArrayOfIds.handler
    events:
      - http:
          path: getUsersByArrayOfIds
          method: post
          cors: true

  updateEmployeePreferences:
    handler: functions/users/updateEmployeePreferences.handler
    events:
      - http:
          path: updateEmployeePreferences
          method: post
          cors: true

  getJobsForSwiping:
    handler: functions/jobs/getJobsForSwiping.handler
    events:
      - http:
          path: getJobsForSwiping
          method: post
          cors: true

  addJob:
    handler: functions/jobs/addJob.handler
    events:
      - http:
          path: addJob
          method: post
          cors: true

  deleteJob:
    handler: functions/jobs/deleteJob.handler
    events:
      - http:
          path: deleteJob
          method: post
          cors: true

  findJob:
    handler: functions/jobs/findJob.handler
    events:
      - http:
          path: findJob
          method: post
          cors: true

  updateJob:
    handler: functions/jobs/updateJob.handler
    events:
      - http:
          path: updateJob
          method: post
          cors: true

  addApplication:
    handler: functions/applications/addApplication.handler
    events:
      - http:
          path: addApplication
          method: post
          cors: true

  findApplicationsByUserId:
    handler: functions/applications/findApplicationsByUserId.handler
    events:
      - http:
          path: findApplicationsByUserId
          method: post
          cors: true
